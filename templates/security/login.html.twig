{% extends 'base.html.twig' %}

{% block title %}Log in!{% endblock %}

{% block body %}
    <form id="login-form">
        {% if error %}
            <div class="alert alert-danger">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
        {% endif %}

        {% if app.user %}
            <div class="mb-3">
                You are logged in as {{ app.user.userIdentifier }}, <a href="{{ path('app_logout') }}">Logout</a>
            </div>
        {% endif %}

        <h1 class="h3 mb-3 font-weight-normal">Please sign in</h1>
        <label for="inputEmail">Email</label>
        <input type="email" value="{{ last_username }}" name="email" id="inputEmail" class="form-control" autocomplete="email" required autofocus>

        <label for="inputPassword">Password</label>
        <input type="password" name="password" id="inputPassword" class="form-control" autocomplete="current-password" required>

        <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

        <div class="checkbox mb-3">
            <label>
                <input type="checkbox" name="_remember_me"> Remember me
            </label>
        </div>

        <button class="btn btn-lg btn-primary" type="submit">Sign in</button>
    </form>

    <script>
        document.getElementById('login-form').addEventListener('submit', async function(event) {
            event.preventDefault(); // Empêche la soumission du formulaire classique

            const email = document.getElementById('inputEmail').value;
            const password = document.getElementById('inputPassword').value;
            const csrfToken = document.querySelector('input[name="_csrf_token"]').value;

            try {
                const response = await fetch('/api/login', { // Ton API de connexion
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        email: email,
                        password: password,
                        _csrf_token: csrfToken
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Invalid credentials');
                }

                const data = await response.json();
                // Si la connexion est réussie, on récupère le token et on le stocke dans localStorage
                localStorage.setItem('jwt_token', data.token);

                // Optionnel : rediriger l'utilisateur vers une autre page
                window.location.href = '/dashboard'; // Par exemple, redirige l'utilisateur vers le dashboard
            } catch (error) {
                alert('Erreur: ' + error.message);
            }
        });
    </script>
{% endblock %}
